#!/bin/bash

# MySQL 8.0 多实例自动安装脚本
# 支持 CentOS 7/8 和 RHEL 7/8
# 作者: Auto-generated
# 版本: 2.0
# 
# 使用方法：
#   ./install_mysql.sh [端口号]
#   
# 示例：
#   ./install_mysql.sh         # 安装默认3306端口实例
#   ./install_mysql.sh 3306    # 安装3306端口实例
#   ./install_mysql.sh 3307    # 安装3307端口实例
#   ./install_mysql.sh 3308    # 安装3308端口实例
#
# 目录结构说明：
#   端口3306（默认）：
#     - 配置文件: /etc/my.cnf
#     - 数据目录: /data/3306/data
#     - 日志目录: /data/3306/log
#   
#   其他端口（如3307）：
#     - 配置文件: /data/3307/conf/mysql_3307.cnf
#     - 数据目录: /data/3307/data
#     - 日志目录: /data/3307/log

set -e  # 遇到错误立即退出

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 日志函数
log_info() {
    echo -e "${GREEN}[INFO]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# 初始化配置变量
init_config() {
    # 获取端口号参数
    MYSQL_PORT="${1:-3306}"

    # 验证端口号
    if ! [[ "$MYSQL_PORT" =~ ^[0-9]+$ ]] || [ "$MYSQL_PORT" -lt 1024 ] || [ "$MYSQL_PORT" -gt 65535 ]; then
        echo "错误: 无效的端口号 '$MYSQL_PORT'"
        echo "端口号必须是1024-65535之间的数字"
        echo ""
        echo "使用方法: $0 [端口号]"
        echo "示例: $0 3306"
        exit 1
    fi

    # 基础配置变量
    MYSQL_VERSION="8.0.32"
    MYSQL_BASE_DIR="/usr/local/mysql"
    MYSQL_USER="mysql"

    # 根据端口号动态设置路径
    if [[ "$MYSQL_PORT" == "3306" ]]; then
        # 3306端口使用传统配置
        MYSQL_DATA_DIR="/data/3306/data"
        MYSQL_LOG_DIR="/data/3306/log"
        MYSQL_CONFIG_FILE="/etc/my.cnf"
        MYSQL_SOCKET="/tmp/mysql.sock"
    else
        # 其他端口使用独立目录结构
        MYSQL_DATA_DIR="/data/${MYSQL_PORT}/data"
        MYSQL_LOG_DIR="/data/${MYSQL_PORT}/log"
        MYSQL_CONFIG_DIR="/data/${MYSQL_PORT}/conf"
        MYSQL_CONFIG_FILE="${MYSQL_CONFIG_DIR}/mysql_${MYSQL_PORT}.cnf"
        MYSQL_SOCKET="/tmp/mysql_${MYSQL_PORT}.sock"
    fi

    # PID和日志文件路径（统一命名规则）
    MYSQL_PID_FILE="${MYSQL_DATA_DIR}/mysql_${MYSQL_PORT}.pid"
    MYSQL_ERROR_LOG="${MYSQL_LOG_DIR}/mysql_${MYSQL_PORT}.err"
    MYSQL_SLOW_LOG="${MYSQL_LOG_DIR}/mysql_${MYSQL_PORT}_slow.log"
}

# 显示当前配置
show_config() {
    echo ""
    echo "=========================================="
    echo -e "${BLUE}MySQL ${MYSQL_VERSION} 实例配置信息${NC}"
    echo "=========================================="
    echo "端口号: $MYSQL_PORT"
    echo "数据目录: $MYSQL_DATA_DIR"
    echo "日志目录: $MYSQL_LOG_DIR"
    echo "配置文件: $MYSQL_CONFIG_FILE"
    echo "Socket文件: $MYSQL_SOCKET"
    echo "PID文件: $MYSQL_PID_FILE"
    echo "错误日志: $MYSQL_ERROR_LOG"
    echo "慢查询日志: $MYSQL_SLOW_LOG"
    
    if [[ "$MYSQL_PORT" == "3306" ]]; then
        echo ""
        echo -e "${GREEN}注意: 端口3306使用传统配置结构${NC}"
    else
        echo ""
        echo -e "${BLUE}注意: 端口${MYSQL_PORT}使用独立目录结构${NC}"
        echo "配置目录: $MYSQL_CONFIG_DIR"
    fi
    echo "=========================================="
    echo ""
    
    read -p "确认使用以上配置继续安装？(y/n): " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo "安装已取消"
        exit 0
    fi
}

# 获取MySQL下载URL
get_mysql_download_url() {
    case $MYSQL_VERSION in
        "8.0.26")
            echo "https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.26-linux-glibc2.12-x86_64.tar.xz"
            ;;
        "8.0.32")
            echo "https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.32-linux-glibc2.12-x86_64.tar.xz"
            ;;
        *)
            log_error "不支持的MySQL版本: $MYSQL_VERSION"
            exit 1
            ;;
    esac
}

# 检查是否为root用户
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "此脚本需要root权限运行"
        exit 1
    fi
}

# 检查系统版本
check_system() {
    log_step "检查系统环境"
    
    if [[ -f /etc/redhat-release ]]; then
        local version=$(cat /etc/redhat-release)
        log_info "系统版本: $version"
        
        # 检查是否为CentOS 8，需要额外的包
        if echo "$version" | grep -q "release 8"; then
            CENTOS8=true
        else
            CENTOS8=false
        fi
    else
        log_error "不支持的操作系统，此脚本仅支持CentOS/RHEL"
        exit 1
    fi
}

# 环境准备
prepare_environment() {
    log_step "准备系统环境"
    
    # 关闭SELinux
    log_info "关闭SELinux"
    setenforce 0 2>/dev/null || true
    sed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/selinux/config
    
    # 卸载MariaDB
    log_info "卸载已存在的MariaDB包"
    local mariadb_packages=$(rpm -qa | grep mariadb 2>/dev/null || true)
    if [[ -n "$mariadb_packages" ]]; then
        yum remove mariadb-libs -y 2>/dev/null || true
        log_info "已卸载MariaDB相关包"
    else
        log_info "未发现MariaDB包"
    fi
    
    # 安装依赖包
    log_info "安装依赖包"
    yum install -y ncurses ncurses-devel libaio-devel openssl openssl-devel wget
    
    # CentOS 8 需要额外的包
    if [[ "$CENTOS8" == "true" ]]; then
        log_info "检测到CentOS 8，安装额外依赖包"
        yum install -y ncurses-compat-libs
    fi
    
    # 关闭防火墙
    log_info "关闭防火墙"
    systemctl stop firewalld 2>/dev/null || true
    systemctl disable firewalld 2>/dev/null || true
    
    log_info "环境准备完成"
}

# 创建MySQL用户
create_mysql_user() {
    log_step "创建MySQL用户"
    
    if id "$MYSQL_USER" &>/dev/null; then
        log_warn "MySQL用户已存在"
    else
        useradd "$MYSQL_USER" -s /sbin/nologin -M
        log_info "MySQL用户创建成功"
    fi
}

# 下载并安装MySQL
download_and_install_mysql() {
    log_step "下载并安装MySQL"
    
    local download_url=$(get_mysql_download_url)
    local filename="mysql-${MYSQL_VERSION}-linux-glibc2.12-x86_64.tar.xz"
    local download_path="/usr/local/$filename"
    
    # 检查是否已经存在MySQL目录
    if [[ -d "$MYSQL_BASE_DIR" ]]; then
        log_warn "MySQL目录已存在，跳过下载"
    else
        # 下载MySQL
        log_info "开始下载MySQL $MYSQL_VERSION"
        if [[ ! -f "$download_path" ]]; then
            wget -P /usr/local "$download_url"
            log_info "MySQL下载完成"
        else
            log_info "MySQL安装包已存在，跳过下载"
        fi
        
        # 解压MySQL
        log_info "解压MySQL安装包"
        cd /usr/local
        tar xf "$filename"
        
        # 创建软链接
        ln -sf "/usr/local/mysql-${MYSQL_VERSION}-linux-glibc2.12-x86_64" "$MYSQL_BASE_DIR"
        log_info "MySQL软链接创建完成"
    fi
    
    # 设置环境变量
    log_info "配置环境变量"
    if ! grep -q "export PATH=\"$MYSQL_BASE_DIR/bin:\$PATH\"" /etc/profile; then
        echo "export PATH=\"$MYSQL_BASE_DIR/bin:\$PATH\"" >> /etc/profile
    fi
    
    # 为当前会话设置PATH
    export PATH="$MYSQL_BASE_DIR/bin:$PATH"
    
    # 验证安装
    if [[ -f "$MYSQL_BASE_DIR/bin/mysql" ]]; then
        local mysql_version_output=$($MYSQL_BASE_DIR/bin/mysql -V)
        log_info "MySQL版本信息: $mysql_version_output"
        log_info "MySQL二进制文件路径: $MYSQL_BASE_DIR/bin"
    else
        log_error "MySQL安装验证失败，找不到mysql命令"
        exit 1
    fi
}

# 创建数据目录和配置文件
setup_mysql_config() {
    log_step "创建目录结构和配置文件"
    
    # 创建必要的目录
    log_info "创建MySQL目录结构"
    mkdir -pv "$MYSQL_DATA_DIR"
    mkdir -pv "$MYSQL_LOG_DIR"
    
    # 如果不是3306端口，创建配置目录
    if [[ "$MYSQL_PORT" != "3306" ]]; then
        mkdir -pv "$MYSQL_CONFIG_DIR"
    fi
    
    # 设置目录权限
    chown -R "$MYSQL_USER:$MYSQL_USER" "/data/${MYSQL_PORT}"
    
    # 创建配置文件
    log_info "创建MySQL配置文件: $MYSQL_CONFIG_FILE"
    
    # 配置文件目录权限（如果不是/etc目录）
    if [[ "$MYSQL_PORT" != "3306" ]]; then
        chown -R "$MYSQL_USER:$MYSQL_USER" "$MYSQL_CONFIG_DIR"
    fi
    
    cat > "$MYSQL_CONFIG_FILE" <<EOF
[mysqld]
user=$MYSQL_USER
basedir=$MYSQL_BASE_DIR
datadir=$MYSQL_DATA_DIR
port=$MYSQL_PORT
socket=$MYSQL_SOCKET
pid-file=$MYSQL_PID_FILE

# 安全设置
skip-name-resolve
default-authentication-plugin=mysql_native_password
bind-address=0.0.0.0

# 字符集设置
character-set-server=utf8mb4
collation-server=utf8mb4_unicode_ci

# InnoDB设置
innodb_buffer_pool_size=256M
innodb_log_file_size=64M
innodb_flush_log_at_trx_commit=1
innodb_lock_wait_timeout=50
innodb_file_per_table=1

# 连接设置
max_connections=200
max_connect_errors=10
wait_timeout=28800
interactive_timeout=28800

# 日志设置
log-error=$MYSQL_ERROR_LOG
slow_query_log=1
slow_query_log_file=$MYSQL_SLOW_LOG
long_query_time=2

# 性能设置
query_cache_type=0
query_cache_size=0

[client]
socket=$MYSQL_SOCKET
default-character-set=utf8mb4
port=$MYSQL_PORT

[mysql]
default-character-set=utf8mb4

[mysqldump]
default-character-set=utf8mb4
EOF
    
    log_info "MySQL配置文件创建完成"
    
    # 显示配置文件内容
    echo ""
    log_info "MySQL配置文件内容如下："
    echo "----------------------------------------"
    cat "$MYSQL_CONFIG_FILE"
    echo "----------------------------------------"
    echo ""
    log_info "配置文件显示完成，3秒后继续..."
    sleep 3
}

# 初始化MySQL数据库
initialize_mysql() {
    log_step "初始化MySQL数据库"
    
    # 检查数据目录是否已经初始化
    if [[ -f "$MYSQL_DATA_DIR/mysql/user.frm" ]] || [[ -f "$MYSQL_DATA_DIR/mysql.ibd" ]]; then
        log_warn "MySQL数据库已经初始化，跳过初始化步骤"
        return 0
    fi
    
    log_info "开始初始化MySQL数据库（使用空密码）"
    
    # 确保PATH包含MySQL二进制文件路径
    export PATH="$MYSQL_BASE_DIR/bin:$PATH"
    
    # 确保目录权限正确
    chown -R "$MYSQL_USER:$MYSQL_USER" "/data/${MYSQL_PORT}"
    
    # 初始化数据库 - 不使用配置文件，避免配置冲突
    log_info "执行MySQL初始化命令"
    "$MYSQL_BASE_DIR/bin/mysqld" --initialize-insecure \
        --user="$MYSQL_USER" \
        --basedir="$MYSQL_BASE_DIR" \
        --datadir="$MYSQL_DATA_DIR"
    
    # 检查初始化是否成功
    if [[ $? -eq 0 ]]; then
        log_info "MySQL数据库初始化完成"
        log_warn "注意: root用户初始密码为空，请在启动后立即设置密码！"
    else
        log_error "MySQL数据库初始化失败"
        exit 1
    fi
}

# 配置MySQL启动脚本
setup_mysql_service() {
    log_step "配置MySQL启动脚本"
    
    # 复制启动脚本
    if [[ -f "$MYSQL_BASE_DIR/support-files/mysql.server" ]]; then
        cp "$MYSQL_BASE_DIR/support-files/mysql.server" /etc/init.d/mysqld
        chmod +x /etc/init.d/mysqld
        
        # 设置开机自启
        /sbin/chkconfig mysqld on
        log_info "MySQL启动脚本配置完成"
    else
        log_error "找不到MySQL启动脚本"
        exit 1
    fi
}

# 创建systemd服务文件
create_systemd_service() {
    log_step "创建systemd服务文件"
    
    log_info "检测到systemd系统，正在创建MySQL systemd服务文件"
    
    # 创建systemd服务文件
    cat > /etc/systemd/system/mysqld_${MYSQL_PORT}.service <<EOF
[Unit]
Description=MySQL Community Server (Port $MYSQL_PORT)
Documentation=man:mysqld(8)
Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html
After=network.target
After=syslog.target

[Install]
WantedBy=multi-user.target

[Service]
User=$MYSQL_USER
Group=$MYSQL_USER

# 服务类型为forking，因为mysqld_safe会fork出mysqld进程
Type=forking

# PID文件路径 - 包含端口号支持多实例
PIDFile=$MYSQL_PID_FILE

# 启动前的准备工作
ExecStartPre=/usr/bin/mkdir -p $MYSQL_DATA_DIR
ExecStartPre=/usr/bin/mkdir -p $MYSQL_LOG_DIR
ExecStartPre=/usr/bin/chown -R $MYSQL_USER:$MYSQL_USER /data/${MYSQL_PORT}
ExecStartPre=/usr/bin/touch $MYSQL_PID_FILE
ExecStartPre=/usr/bin/chown $MYSQL_USER:$MYSQL_USER $MYSQL_PID_FILE

# 启动命令 - 使用mysqld_safe启动
ExecStart=$MYSQL_BASE_DIR/bin/mysqld_safe --defaults-file=$MYSQL_CONFIG_FILE --pid-file=$MYSQL_PID_FILE --daemonize

# 停止命令 - 使用mysqladmin安全关闭
ExecStop=$MYSQL_BASE_DIR/bin/mysqladmin -u root -S $MYSQL_SOCKET shutdown

# 重新加载配置
ExecReload=/bin/kill -HUP \$MAINPID

# 重启策略
Restart=on-failure
RestartPreventExitStatus=1

# 超时设置 - 增加启动超时时间
TimeoutStartSec=300
TimeoutStopSec=120

# 安全设置
PrivateTmp=false
PrivateNetwork=false
PrivateDevices=false

# 资源限制
LimitNOFILE=65535
LimitNPROC=65535

# 工作目录
WorkingDirectory=$MYSQL_BASE_DIR

# 环境变量
Environment=PATH=$MYSQL_BASE_DIR/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
EOF

    log_info "systemd服务文件创建完成: /etc/systemd/system/mysqld_${MYSQL_PORT}.service"
    
    # 显示服务文件内容
    echo ""
    log_info "MySQL systemd服务文件内容："
    echo "----------------------------------------"
    cat /etc/systemd/system/mysqld_${MYSQL_PORT}.service
    echo "----------------------------------------"
    echo ""
    
    # 重新加载systemd配置
    log_info "重新加载systemd配置"
    systemctl daemon-reload
    
    log_info "systemd服务配置完成，3秒后继续..."
    sleep 3
}

# 配置systemd服务（可选）
setup_systemd_service() {
    log_step "配置MySQL服务启动方式"
    
    # 定义服务名称（包含端口号）
    local service_name="mysqld_${MYSQL_PORT}"
    
    # 检查系统是否支持systemd
    if command -v systemctl >/dev/null 2>&1 && [[ -d /etc/systemd/system ]]; then
        echo ""
        echo -e "${YELLOW}检测到systemd系统，请选择MySQL服务管理方式：${NC}"
        echo "1) 创建systemd服务文件 (推荐) - 使用systemctl管理"
        echo "2) 仅使用传统init.d脚本 - 使用service命令管理"
        echo "3) 两种方式都配置 - 最大兼容性"
        echo ""
        read -p "请输入选择 (1/2/3): " choice
        
        case "$choice" in
            1)
                log_info "选择创建systemd服务文件"
                create_systemd_service
                
                # 尝试启用systemd服务
                log_info "启用MySQL systemd服务: $service_name"
                if systemctl enable "$service_name"; then
                    log_info "systemd服务启用成功！"
                    echo ""
                    echo -e "${GREEN}可以使用以下systemctl命令管理MySQL (端口$MYSQL_PORT)：${NC}"
                    echo "  启动: systemctl start $service_name"
                    echo "  停止: systemctl stop $service_name"
                    echo "  重启: systemctl restart $service_name"
                    echo "  状态: systemctl status $service_name"
                    echo "  开机自启: systemctl enable $service_name"
                else
                    log_error "systemd服务启用失败"
                    # 回退到chkconfig方式
                    log_info "回退到chkconfig方式"
                    /sbin/chkconfig mysqld on
                fi
                ;;
            2)
                log_info "选择仅使用传统init.d脚本"
                /sbin/chkconfig mysqld on
                log_info "已通过chkconfig启用MySQL服务"
                ;;
            3)
                log_info "选择配置两种启动方式"
                create_systemd_service
                
                # 先尝试systemd方式
                if systemctl enable "$service_name" 2>/dev/null; then
                    log_info "systemd服务启用成功"
                else
                    log_warn "systemd启用失败，使用chkconfig作为备选"
                    /sbin/chkconfig mysqld on
                fi
                
                log_info "两种启动方式都已配置完成"
                ;;
            *)
                log_warn "无效选择，使用默认的chkconfig方式"
                /sbin/chkconfig mysqld on
                ;;
        esac
    else
        log_info "未检测到systemd，使用传统的chkconfig方式"
        /sbin/chkconfig mysqld on
    fi
    
    echo ""
    log_info "服务配置完成，继续安装流程..."
    sleep 2
}

# 启动MySQL服务
start_mysql() {
    log_step "启动MySQL服务"
    
    # 检查MySQL是否已经在运行
    if pgrep -f mysqld >/dev/null; then
        log_warn "MySQL服务已经在运行"
        return 0
    fi
    
    # 定义服务名称
    local service_name="mysqld_${MYSQL_PORT}"
    
    # 检查是否存在systemd服务文件
    if [[ -f "/etc/systemd/system/${service_name}.service" ]] && command -v systemctl >/dev/null 2>&1; then
        log_info "使用systemd方式启动MySQL服务: $service_name"
        
        # 清理可能存在的旧PID文件
        if [[ -f "$MYSQL_PID_FILE" ]]; then
            log_info "清理旧的PID文件: $MYSQL_PID_FILE"
            rm -f "$MYSQL_PID_FILE"
        fi
        
        # 确保目录权限正确
        chown -R "$MYSQL_USER:$MYSQL_USER" "/data/${MYSQL_PORT}"
        
        # 使用systemctl启动
        log_info "执行: systemctl start $service_name"
        if systemctl start "$service_name"; then
            log_info "MySQL服务通过systemd启动成功"
        else
            log_error "systemd启动失败，开始故障排除"
            troubleshoot_mysql_startup
            return 1
        fi
    else
        log_info "使用传统init.d方式启动MySQL服务"
        /etc/init.d/mysqld start
    fi
    
    # 等待MySQL启动完成
    local retry_count=0
    local max_retries=60  # 增加重试次数
    
    log_info "等待MySQL完全启动..."
    while [[ $retry_count -lt $max_retries ]]; do
        if "$MYSQL_BASE_DIR/bin/mysqladmin" ping -h localhost >/dev/null 2>&1; then
            log_info "MySQL服务启动成功"
            
            # 显示MySQL进程信息
            echo ""
            log_info "MySQL进程信息："
            ps aux | grep -E '[m]ysql' | head -5
            echo ""
            
            # 显示端口监听情况
            log_info "MySQL端口监听情况："
            netstat -tlnp 2>/dev/null | grep ":$MYSQL_PORT " || ss -tlnp | grep ":$MYSQL_PORT "
            echo ""
            
            # 检查systemd服务状态
            if [[ -f "/etc/systemd/system/${service_name}.service" ]]; then
                echo ""
                log_info "systemd服务状态："
                systemctl status "$service_name" --no-pager -l
                echo ""
            fi
            
            return 0
        fi
        
        log_info "等待MySQL启动... ($((retry_count + 1))/$max_retries)"
        sleep 2
        ((retry_count++))
    done
    
    log_error "MySQL启动超时，开始故障排除"
    troubleshoot_mysql_startup
    exit 1
}

# MySQL启动故障排除函数
troubleshoot_mysql_startup() {
    log_step "MySQL启动故障排除"
    
    local service_name="mysqld_${MYSQL_PORT}"
    
    echo ""
    echo "=========================================="
    echo -e "${RED}MySQL启动失败，开始故障排除${NC}"
    echo "=========================================="
    echo ""
    
    # 1. 检查systemd服务状态
    if [[ -f "/etc/systemd/system/${service_name}.service" ]]; then
        echo "1. systemd服务状态 ($service_name)："
        systemctl status "$service_name" --no-pager -l || true
        echo ""
        
        echo "2. systemd日志 (最近50行)："
        journalctl -u "$service_name" -n 50 --no-pager || true
        echo ""
    fi
    
    # 2. 检查MySQL错误日志
    if [[ -f "$MYSQL_ERROR_LOG" ]]; then
        echo "3. MySQL错误日志 (最后30行)："
        echo "   文件位置: $MYSQL_ERROR_LOG"
        tail -30 "$MYSQL_ERROR_LOG" 2>/dev/null || echo "   无法读取错误日志文件"
        echo ""
    else
        echo "3. MySQL错误日志文件不存在: $MYSQL_ERROR_LOG"
        echo ""
    fi
    
    # 3. 检查PID文件
    echo "4. PID文件检查："
    if [[ -f "$MYSQL_PID_FILE" ]]; then
        echo "   PID文件存在: $MYSQL_PID_FILE"
        echo "   PID内容: $(cat "$MYSQL_PID_FILE" 2>/dev/null || echo '无法读取')"
        local pid_content=$(cat "$MYSQL_PID_FILE" 2>/dev/null)
        if [[ -n "$pid_content" ]] && kill -0 "$pid_content" 2>/dev/null; then
            echo "   进程 $pid_content 仍在运行"
        else
            echo "   PID文件中的进程已不存在"
        fi
    else
        echo "   PID文件不存在: $MYSQL_PID_FILE"
    fi
    echo ""
    
    # 4. 检查端口占用
    echo "5. 端口占用检查："
    local port_check=$(netstat -tlnp 2>/dev/null | grep ":$MYSQL_PORT " || ss -tlnp 2>/dev/null | grep ":$MYSQL_PORT " || echo "端口未被占用")
    echo "   端口 $MYSQL_PORT: $port_check"
    echo ""
    
    # 5. 检查数据目录权限
    echo "6. 数据目录权限检查："
    echo "   数据目录: $MYSQL_DATA_DIR"
    if [[ -d "$MYSQL_DATA_DIR" ]]; then
        echo "   权限信息: $(ls -ld "$MYSQL_DATA_DIR")"
        echo "   所有者: $(stat -c '%U:%G' "$MYSQL_DATA_DIR" 2>/dev/null || echo '无法获取')"
    else
        echo "   数据目录不存在！"
    fi
    echo ""
    
    # 6. 检查MySQL进程
    echo "7. MySQL进程检查："
    local mysql_processes=$(ps aux | grep -E '[m]ysql' || echo "未发现MySQL进程")
    echo "$mysql_processes"
    echo ""
    
    # 7. 检查磁盘空间
    echo "8. 磁盘空间检查："
    df -h "$MYSQL_DATA_DIR" 2>/dev/null || df -h /
    echo ""
    
    # 8. 检查配置文件
    echo "9. 配置文件检查："
    if [[ -f "$MYSQL_CONFIG_FILE" ]]; then
        echo "   配置文件存在: $MYSQL_CONFIG_FILE"
        echo "   权限信息: $(ls -l "$MYSQL_CONFIG_FILE")"
    else
        echo "   配置文件不存在: $MYSQL_CONFIG_FILE"
    fi
    echo ""
    
    # 9. 提供解决建议
    echo "=========================================="
    echo -e "${YELLOW}常见解决方案${NC}"
    echo "=========================================="
    echo ""
    echo "1. 检查错误日志中的具体错误信息："
    echo "   tail -f $MYSQL_ERROR_LOG"
    echo ""
    echo "2. 确保数据目录权限正确："
    echo "   chown -R mysql:mysql /data/${MYSQL_PORT}"
    echo ""
    echo "3. 如果是权限问题，重新初始化："
    echo "   rm -rf $MYSQL_DATA_DIR/*"
    echo "   $MYSQL_BASE_DIR/bin/mysqld --initialize-insecure --user=mysql --basedir=$MYSQL_BASE_DIR --datadir=$MYSQL_DATA_DIR"
    echo ""
    echo "4. 手动启动测试："
    echo "   sudo -u mysql $MYSQL_BASE_DIR/bin/mysqld_safe --defaults-file=$MYSQL_CONFIG_FILE &"
    echo ""
    echo "5. 检查端口冲突："
    echo "   netstat -tlnp | grep $MYSQL_PORT"
    echo ""
    echo "6. 查看完整的启动日志："
    if [[ -f "/etc/systemd/system/${service_name}.service" ]]; then
        echo "   journalctl -u $service_name -f"
    else
        echo "   tail -f $MYSQL_ERROR_LOG"
    fi
    echo ""
}

# 安全配置提醒
security_reminder() {
    log_step "安装完成 - 安全配置提醒"
    
    echo ""
    echo "=========================================="
    echo -e "${GREEN}🎉 MySQL ${MYSQL_VERSION} 安装成功！${NC}"
    echo "=========================================="
    echo ""
    echo -e "${YELLOW}📋 实例配置信息${NC}"
    echo "----------------------------------------"
    echo "• MySQL版本: $MYSQL_VERSION"
    echo "• 端口号: $MYSQL_PORT"
    echo "• 安装目录: $MYSQL_BASE_DIR"
    echo "• 数据目录: $MYSQL_DATA_DIR"
    echo "• 日志目录: $MYSQL_LOG_DIR"
    echo "• 配置文件: $MYSQL_CONFIG_FILE"
    echo "• Socket文件: $MYSQL_SOCKET"
    echo "• PID文件: $MYSQL_PID_FILE"
    echo "• 错误日志: $MYSQL_ERROR_LOG"
    echo "• 慢查询日志: $MYSQL_SLOW_LOG"
    
    if [[ "$MYSQL_PORT" == "3306" ]]; then
        echo ""
        echo -e "${GREEN}✨ 标准实例配置 (端口3306)${NC}"
    else
        echo ""
        echo -e "${BLUE}🔧 独立实例配置 (端口${MYSQL_PORT})${NC}"
        echo "• 配置目录: $MYSQL_CONFIG_DIR"
    fi
    
    echo ""
    echo -e "${RED}🔐 安全提醒（重要！）${NC}"
    echo "----------------------------------------"
    echo "1. root用户当前密码为空，请立即设置密码："
    echo "   mysql -u root -S $MYSQL_SOCKET"
    echo "   ALTER USER 'root'@'localhost' IDENTIFIED BY '你的强密码';"
    echo "   FLUSH PRIVILEGES;"
    echo ""
    echo "2. 建议运行MySQL安全配置向导："
    echo "   mysql_secure_installation --socket=$MYSQL_SOCKET"
    echo ""
    
    # 服务管理命令
    echo "3. MySQL服务管理命令："
    local service_name="mysqld_${MYSQL_PORT}"
    if [[ -f "/etc/systemd/system/${service_name}.service" ]] && systemctl is-enabled "$service_name" &>/dev/null; then
        echo -e "   ${GREEN}(推荐使用systemd方式)${NC}"
        echo "   启动: systemctl start $service_name"
        echo "   停止: systemctl stop $service_name"
        echo "   重启: systemctl restart $service_name"
        echo "   状态: systemctl status $service_name"
        echo "   查看日志: journalctl -u $service_name -f"
        echo ""
        echo "   传统方式仍然可用:"
        echo "   启动: /etc/init.d/mysqld start"
        echo "   停止: /etc/init.d/mysqld stop"
        echo "   重启: /etc/init.d/mysqld restart"
    else
        echo -e "   ${YELLOW}(使用传统init.d方式)${NC}"
        echo "   启动: /etc/init.d/mysqld start 或 service mysqld start"
        echo "   停止: /etc/init.d/mysqld stop 或 service mysqld stop"
        echo "   重启: /etc/init.d/mysqld restart 或 service mysqld restart"
    fi
    
    echo ""
    echo -e "${BLUE}🔧 故障排除${NC}"
    echo "----------------------------------------"
    echo "如果MySQL启动失败，可以："
    echo "1. 检查错误日志: tail -f $MYSQL_ERROR_LOG"
    if [[ -f "/etc/systemd/system/${service_name}.service" ]]; then
        echo "2. 查看systemd日志: journalctl -u $service_name -f"
    fi
    echo "3. 检查端口占用: netstat -tlnp | grep $MYSQL_PORT"
    echo "4. 验证目录权限: ls -la /data/${MYSQL_PORT}"
    echo "5. 手动启动测试: sudo -u mysql $MYSQL_BASE_DIR/bin/mysqld_safe --defaults-file=$MYSQL_CONFIG_FILE &"
    echo ""
    echo -e "${GREEN}✅ 测试连接${NC}"
    echo "----------------------------------------"
    echo "测试MySQL连接："
    echo "  Socket连接: mysql -u root -S $MYSQL_SOCKET"
    echo "  TCP连接: mysql -u root -h 127.0.0.1 -P $MYSQL_PORT"
    echo "  检查版本: mysql -u root -S $MYSQL_SOCKET -e 'SELECT VERSION();'"
    echo "  查看数据库: mysql -u root -S $MYSQL_SOCKET -e 'SHOW DATABASES;'"
    echo ""
    
    # 多实例快速部署指南
    echo "=========================================="
    echo -e "${BLUE}🚀 多实例快速部署指南${NC}"
    echo "=========================================="
    echo ""
    echo "安装其他端口实例："
    echo "  $0 3307    # 安装3307端口实例"
    echo "  $0 3308    # 安装3308端口实例"
    echo ""
    echo "不同实例的目录结构："
    echo "  端口3306: /etc/my.cnf (传统配置)"
    echo "  端口3307: /data/3307/{data,conf,log}"
    echo "  端口3308: /data/3308/{data,conf,log}"
    echo ""
    echo "多实例管理："
    echo "  systemctl start mysqld_3306    # 启动3306"
    echo "  systemctl start mysqld_3307    # 启动3307"
    echo "  mysql -S /tmp/mysql.sock        # 连接3306"
    echo "  mysql -S /tmp/mysql_3307.sock   # 连接3307"
    echo ""
    echo "=========================================="
    echo -e "${GREEN}安装完成！祝您使用愉快！${NC}"
    echo "=========================================="
}

# 主函数
main() {
    # 初始化配置变量
    init_config "$1"
    
    log_info "开始MySQL ${MYSQL_VERSION} 自动安装 (端口: $MYSQL_PORT)"
    
    # 显示配置并确认
    show_config
    
    check_root
    check_system
    prepare_environment
    create_mysql_user
    download_and_install_mysql
    setup_mysql_config
    initialize_mysql
    
    log_info "数据库初始化完成，继续配置服务..."
    
    setup_mysql_service
    setup_systemd_service
    start_mysql
    security_reminder
    
    log_info "MySQL ${MYSQL_VERSION} 安装完成！"
}

# 脚本入口
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # 显示脚本信息
    echo ""
    echo "=========================================="
    echo -e "${GREEN}MySQL ${MYSQL_VERSION:-8.0.32} 多实例安装脚本${NC}"
    echo "=========================================="
    echo "使用方法: $0 [端口号]"
    echo "默认端口: 3306"
    echo ""
    echo "示例:"
    echo "  $0         # 安装3306端口实例"
    echo "  $0 3306    # 安装3306端口实例" 
    echo "  $0 3307    # 安装3307端口实例"
    echo "  $0 3308    # 安装3308端口实例"
    echo "=========================================="
    echo ""
    
    main "$@"
fi